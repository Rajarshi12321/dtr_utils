name: Publish Python Package

on:
  push:
    branches:
      - main  # Runs only on push to main branch
    paths-ignore:
      - "**/*.md"  # Ignore Markdown files
      - "**/*.txt" # Ignore text files
 

jobs:
  check-setup-changes:
    runs-on: ubuntu-latest
    outputs:
      setup_changed: ${{ steps.check.outputs.setup_changed }}  # Pass result to next jobs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for changes in setup.py
        id: check
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q 'setup.py'; then
            echo "setup.py has changed."
            echo "setup_changed=true" >> $GITHUB_ENV
            echo "setup_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes in setup.py. Skipping build."
            echo "setup_changed=false" >> $GITHUB_ENV
            echo "setup_changed=false" >> $GITHUB_OUTPUT
          fi  # Closing the if block

  build-and-publish:
    needs: check-setup-changes
    if: needs.check-setup-changes.outputs.setup_changed == 'true'  # Only run if setup.py changed
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ env.PACKAGE_VERSION }}  # Pass version to next job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Extract version from setup.py
        id: get_version
        run: |
          VERSION=$(python extract_version.py)
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV  # Store version
          echo "Extracted version: $VERSION"

      - name: Build the package
        run: |
          python setup.py sdist bdist_wheel

      - name: Verify built files
        run: |
          echo "Built package files:"
          ls -lh dist/

      - name: Upload built package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package-v${{ env.PACKAGE_VERSION }}
          path: dist/
          compression-level: 0  # Faster upload

  publish:
    needs: build-and-publish
    if: needs.build-and-publish.outputs.package_version != ''  # Only run if a package was built
    runs-on: ubuntu-latest
    env:
      PACKAGE_VERSION: ${{ needs.build-and-publish.outputs.package_version }}  # Retrieve version

    steps:
      - name: Download built package artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package-v${{ env.PACKAGE_VERSION }}
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Twine
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Upload package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "Uploading package version $PACKAGE_VERSION from extracted artifact..."
          twine upload dist/*
